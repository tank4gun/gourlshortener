// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shortender_CreateShortUrl_FullMethodName        = "/service.Shortender/CreateShortUrl"
	Shortender_GetUrlById_FullMethodName            = "/service.Shortender/GetUrlById"
	Shortender_CreateShortenURLBatch_FullMethodName = "/service.Shortender/CreateShortenURLBatch"
	Shortender_GetAllUrls_FullMethodName            = "/service.Shortender/GetAllUrls"
	Shortender_DeleteUrls_FullMethodName            = "/service.Shortender/DeleteUrls"
	Shortender_Ping_FullMethodName                  = "/service.Shortender/Ping"
	Shortender_GetStats_FullMethodName              = "/service.Shortender/GetStats"
)

// ShortenderClient is the client API for Shortender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenderClient interface {
	CreateShortUrl(ctx context.Context, in *UrlToShortenRequest, opts ...grpc.CallOption) (*ShortenUrlResponse, error)
	GetUrlById(ctx context.Context, in *UrlByIdRequest, opts ...grpc.CallOption) (*UrlByIdResponse, error)
	CreateShortenURLBatch(ctx context.Context, in *BatchUrlRequest, opts ...grpc.CallOption) (*BatchUrlResponse, error)
	GetAllUrls(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FullInfoUrlBatchResponse, error)
	DeleteUrls(ctx context.Context, in *DeleteUrlsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error)
}

type shortenderClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenderClient(cc grpc.ClientConnInterface) ShortenderClient {
	return &shortenderClient{cc}
}

func (c *shortenderClient) CreateShortUrl(ctx context.Context, in *UrlToShortenRequest, opts ...grpc.CallOption) (*ShortenUrlResponse, error) {
	out := new(ShortenUrlResponse)
	err := c.cc.Invoke(ctx, Shortender_CreateShortUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenderClient) GetUrlById(ctx context.Context, in *UrlByIdRequest, opts ...grpc.CallOption) (*UrlByIdResponse, error) {
	out := new(UrlByIdResponse)
	err := c.cc.Invoke(ctx, Shortender_GetUrlById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenderClient) CreateShortenURLBatch(ctx context.Context, in *BatchUrlRequest, opts ...grpc.CallOption) (*BatchUrlResponse, error) {
	out := new(BatchUrlResponse)
	err := c.cc.Invoke(ctx, Shortender_CreateShortenURLBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenderClient) GetAllUrls(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FullInfoUrlBatchResponse, error) {
	out := new(FullInfoUrlBatchResponse)
	err := c.cc.Invoke(ctx, Shortender_GetAllUrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenderClient) DeleteUrls(ctx context.Context, in *DeleteUrlsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Shortender_DeleteUrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenderClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Shortender_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenderClient) GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, Shortender_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenderServer is the server API for Shortender service.
// All implementations must embed UnimplementedShortenderServer
// for forward compatibility
type ShortenderServer interface {
	CreateShortUrl(context.Context, *UrlToShortenRequest) (*ShortenUrlResponse, error)
	GetUrlById(context.Context, *UrlByIdRequest) (*UrlByIdResponse, error)
	CreateShortenURLBatch(context.Context, *BatchUrlRequest) (*BatchUrlResponse, error)
	GetAllUrls(context.Context, *emptypb.Empty) (*FullInfoUrlBatchResponse, error)
	DeleteUrls(context.Context, *DeleteUrlsRequest) (*emptypb.Empty, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetStats(context.Context, *emptypb.Empty) (*StatsResponse, error)
	mustEmbedUnimplementedShortenderServer()
}

// UnimplementedShortenderServer must be embedded to have forward compatible implementations.
type UnimplementedShortenderServer struct {
}

func (UnimplementedShortenderServer) CreateShortUrl(context.Context, *UrlToShortenRequest) (*ShortenUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortUrl not implemented")
}
func (UnimplementedShortenderServer) GetUrlById(context.Context, *UrlByIdRequest) (*UrlByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlById not implemented")
}
func (UnimplementedShortenderServer) CreateShortenURLBatch(context.Context, *BatchUrlRequest) (*BatchUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortenURLBatch not implemented")
}
func (UnimplementedShortenderServer) GetAllUrls(context.Context, *emptypb.Empty) (*FullInfoUrlBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUrls not implemented")
}
func (UnimplementedShortenderServer) DeleteUrls(context.Context, *DeleteUrlsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUrls not implemented")
}
func (UnimplementedShortenderServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortenderServer) GetStats(context.Context, *emptypb.Empty) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortenderServer) mustEmbedUnimplementedShortenderServer() {}

// UnsafeShortenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenderServer will
// result in compilation errors.
type UnsafeShortenderServer interface {
	mustEmbedUnimplementedShortenderServer()
}

func RegisterShortenderServer(s grpc.ServiceRegistrar, srv ShortenderServer) {
	s.RegisterService(&Shortender_ServiceDesc, srv)
}

func _Shortender_CreateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlToShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenderServer).CreateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortender_CreateShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenderServer).CreateShortUrl(ctx, req.(*UrlToShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortender_GetUrlById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenderServer).GetUrlById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortender_GetUrlById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenderServer).GetUrlById(ctx, req.(*UrlByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortender_CreateShortenURLBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenderServer).CreateShortenURLBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortender_CreateShortenURLBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenderServer).CreateShortenURLBatch(ctx, req.(*BatchUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortender_GetAllUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenderServer).GetAllUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortender_GetAllUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenderServer).GetAllUrls(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortender_DeleteUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenderServer).DeleteUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortender_DeleteUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenderServer).DeleteUrls(ctx, req.(*DeleteUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortender_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenderServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortender_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenderServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortender_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenderServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortender_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenderServer).GetStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortender_ServiceDesc is the grpc.ServiceDesc for Shortender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Shortender",
	HandlerType: (*ShortenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortUrl",
			Handler:    _Shortender_CreateShortUrl_Handler,
		},
		{
			MethodName: "GetUrlById",
			Handler:    _Shortender_GetUrlById_Handler,
		},
		{
			MethodName: "CreateShortenURLBatch",
			Handler:    _Shortender_CreateShortenURLBatch_Handler,
		},
		{
			MethodName: "GetAllUrls",
			Handler:    _Shortender_GetAllUrls_Handler,
		},
		{
			MethodName: "DeleteUrls",
			Handler:    _Shortender_DeleteUrls_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Shortender_Ping_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Shortender_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
